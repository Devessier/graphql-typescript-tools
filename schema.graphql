schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """refresh the cache entry"""
  refresh: Boolean! = false

  """measured in seconds"""
  ttl: Int! = 60
) on QUERY

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

"""ordering argument of a cursor"""
enum cursor_ordering {
  """ascending ordering of the cursor"""
  ASC

  """descending ordering of the cursor"""
  DESC
}

"""mutation root"""
type mutation_root {
  """
  insert data into the table: "news_comments"
  """
  insert_news_comments(
    """the rows to be inserted"""
    objects: [news_comments_insert_input!]!

    """upsert condition"""
    on_conflict: news_comments_on_conflict
  ): news_comments_mutation_response

  """
  insert a single row into the table: "news_comments"
  """
  insert_news_comments_one(
    """the row to be inserted"""
    object: news_comments_insert_input!

    """upsert condition"""
    on_conflict: news_comments_on_conflict
  ): news_comments
}

"""
columns and relationships of "news_comments"
"""
type news_comments {
  created_at: timestamptz!

  """An object relationship"""
  news_feed: news_feeds!
  news_feed_uuid: uuid!
  text: String!
  uuid: uuid!
}

"""
order by aggregate values of table "news_comments"
"""
input news_comments_aggregate_order_by {
  count: order_by
  max: news_comments_max_order_by
  min: news_comments_min_order_by
}

"""
Boolean expression to filter rows from the table "news_comments". All fields are combined with a logical 'AND'.
"""
input news_comments_bool_exp {
  _and: [news_comments_bool_exp!]
  _not: news_comments_bool_exp
  _or: [news_comments_bool_exp!]
  created_at: timestamptz_comparison_exp
  news_feed: news_feeds_bool_exp
  news_feed_uuid: uuid_comparison_exp
  text: String_comparison_exp
  uuid: uuid_comparison_exp
}

"""
unique or primary key constraints on table "news_comments"
"""
enum news_comments_constraint {
  """
  unique or primary key constraint on columns "uuid"
  """
  news_comments_pkey
}

"""
input type for inserting data into table "news_comments"
"""
input news_comments_insert_input {
  news_feed_uuid: uuid
  text: String
}

"""
order by max() on columns of table "news_comments"
"""
input news_comments_max_order_by {
  created_at: order_by
  news_feed_uuid: order_by
  text: order_by
  uuid: order_by
}

"""
order by min() on columns of table "news_comments"
"""
input news_comments_min_order_by {
  created_at: order_by
  news_feed_uuid: order_by
  text: order_by
  uuid: order_by
}

"""
response of any mutation on the table "news_comments"
"""
type news_comments_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [news_comments!]!
}

"""
on_conflict condition type for table "news_comments"
"""
input news_comments_on_conflict {
  constraint: news_comments_constraint!
  update_columns: [news_comments_update_column!]! = []
  where: news_comments_bool_exp
}

"""Ordering options when selecting data from "news_comments"."""
input news_comments_order_by {
  created_at: order_by
  news_feed: news_feeds_order_by
  news_feed_uuid: order_by
  text: order_by
  uuid: order_by
}

"""
select columns of table "news_comments"
"""
enum news_comments_select_column {
  """column name"""
  created_at

  """column name"""
  news_feed_uuid

  """column name"""
  text

  """column name"""
  uuid
}

"""
Streaming cursor of the table "news_comments"
"""
input news_comments_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: news_comments_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input news_comments_stream_cursor_value_input {
  created_at: timestamptz
  news_feed_uuid: uuid
  text: String
  uuid: uuid
}

"""
placeholder for update columns of table "news_comments" (current role has no relevant permissions)
"""
enum news_comments_update_column {
  """placeholder (do not use)"""
  _PLACEHOLDER
}

"""
columns and relationships of "news_feeds"
"""
type news_feeds {
  created_at: timestamptz!

  """An array relationship"""
  news_comments(
    """distinct select on columns"""
    distinct_on: [news_comments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [news_comments_order_by!]

    """filter the rows returned"""
    where: news_comments_bool_exp
  ): [news_comments!]!
  text: String!
  title: String!
  uuid: uuid!
}

"""
Boolean expression to filter rows from the table "news_feeds". All fields are combined with a logical 'AND'.
"""
input news_feeds_bool_exp {
  _and: [news_feeds_bool_exp!]
  _not: news_feeds_bool_exp
  _or: [news_feeds_bool_exp!]
  created_at: timestamptz_comparison_exp
  news_comments: news_comments_bool_exp
  text: String_comparison_exp
  title: String_comparison_exp
  uuid: uuid_comparison_exp
}

"""Ordering options when selecting data from "news_feeds"."""
input news_feeds_order_by {
  created_at: order_by
  news_comments_aggregate: news_comments_aggregate_order_by
  text: order_by
  title: order_by
  uuid: order_by
}

"""
select columns of table "news_feeds"
"""
enum news_feeds_select_column {
  """column name"""
  created_at

  """column name"""
  text

  """column name"""
  title

  """column name"""
  uuid
}

"""
Streaming cursor of the table "news_feeds"
"""
input news_feeds_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: news_feeds_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input news_feeds_stream_cursor_value_input {
  created_at: timestamptz
  text: String
  title: String
  uuid: uuid
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

type query_root {
  """An array relationship"""
  news_comments(
    """distinct select on columns"""
    distinct_on: [news_comments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [news_comments_order_by!]

    """filter the rows returned"""
    where: news_comments_bool_exp
  ): [news_comments!]!

  """fetch data from the table: "news_comments" using primary key columns"""
  news_comments_by_pk(uuid: uuid!): news_comments

  """
  fetch data from the table: "news_feeds"
  """
  news_feeds(
    """distinct select on columns"""
    distinct_on: [news_feeds_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [news_feeds_order_by!]

    """filter the rows returned"""
    where: news_feeds_bool_exp
  ): [news_feeds!]!

  """fetch data from the table: "news_feeds" using primary key columns"""
  news_feeds_by_pk(uuid: uuid!): news_feeds
}

type subscription_root {
  """An array relationship"""
  news_comments(
    """distinct select on columns"""
    distinct_on: [news_comments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [news_comments_order_by!]

    """filter the rows returned"""
    where: news_comments_bool_exp
  ): [news_comments!]!

  """fetch data from the table: "news_comments" using primary key columns"""
  news_comments_by_pk(uuid: uuid!): news_comments

  """
  fetch data from the table in a streaming manner: "news_comments"
  """
  news_comments_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [news_comments_stream_cursor_input]!

    """filter the rows returned"""
    where: news_comments_bool_exp
  ): [news_comments!]!

  """
  fetch data from the table: "news_feeds"
  """
  news_feeds(
    """distinct select on columns"""
    distinct_on: [news_feeds_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [news_feeds_order_by!]

    """filter the rows returned"""
    where: news_feeds_bool_exp
  ): [news_feeds!]!

  """fetch data from the table: "news_feeds" using primary key columns"""
  news_feeds_by_pk(uuid: uuid!): news_feeds

  """
  fetch data from the table in a streaming manner: "news_feeds"
  """
  news_feeds_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [news_feeds_stream_cursor_input]!

    """filter the rows returned"""
    where: news_feeds_bool_exp
  ): [news_feeds!]!
}

scalar timestamptz

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

scalar uuid

"""
Boolean expression to compare columns of type "uuid". All fields are combined with logical 'AND'.
"""
input uuid_comparison_exp {
  _eq: uuid
  _gt: uuid
  _gte: uuid
  _in: [uuid!]
  _is_null: Boolean
  _lt: uuid
  _lte: uuid
  _neq: uuid
  _nin: [uuid!]
}